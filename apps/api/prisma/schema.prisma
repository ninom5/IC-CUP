generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String   @id @default(uuid())
  firstName      String
  lastName       String
  email          String   @unique
  password       String
  dateOfBirth    DateTime
  personPhoto    String
  role           Role     @default(USER)
  isVerified     Boolean  @default(false)
  driverLicense  String
  idCard         String
  phoneNumber    String
  address        String
  bankAccount    String?
  totalEarnings  Float    @default(0.0)
  isSuspended    Boolean  @default(false)
  createdAt      DateTime @default(now())
  lastModifiedAt DateTime @default(now()) @updatedAt

  vehicles       Vehicle[]     @relation("UserVehicles")
  rentals        Rental[]      @relation("UserRentals")
  notifications  Notification[]
  incidents      Incident[]    @relation("ReporterIncidents")
}

model Location {
  id        String @id @default(uuid())
  address   String  
  city      String?
  longitude Decimal 
  latitude  Decimal
}

model Vehicle {
  id                      String   @id @default(uuid())
  ownerId                 String
  owner                   User     @relation("UserVehicles", fields: [ownerId], references: [id], onDelete: Cascade)
  brand                   String
  model                   String
  images                  String[]
  productionYear          Int
  dailyPrice              Float
  description             String?
  isVerified              Boolean  @default(false)
  vehicleLicenseImg       String  
  registration            String
  registrationExpiration  DateTime
  pickupAddress           String
  city                    String
  longitude               Float
  latitude                Float
  vehicleType             VehicleType
  details                 Json
  features                Json
  rentals                 Rental[]
  availabilities          VehicleAvailability[]


  @@index([ownerId])
}

model Review {
  id            String   @id @default(uuid())
  rentalId      String   @unique
  rental        Rental   @relation(fields: [rentalId], references: [id], onDelete: Cascade)
  rating        Float
  comment       String?
  createdAt     DateTime @default(now())
}

model Rental {
  id              String   @id @default(uuid())
  renterId        String
  renter          User     @relation("UserRentals", fields: [renterId], references: [id], onDelete: Cascade)
  vehicleId       String
  vehicle         Vehicle  @relation(fields: [vehicleId], references: [id], onDelete: Cascade)
  startDate       DateTime
  endDate         DateTime
  totalPrice      Float
  status          RentalStatus @default(PENDING)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  review          Review?
  payment         Payment?
  incidents       Incident[]
  notifications   Notification[]
}

model Incident {
  id              String   @id @default(uuid())
  rentalId        String
  rental          Rental  @relation(fields: [rentalId], references: [id], onDelete: Cascade)
  reporterId      String
  reporter        User    @relation("ReporterIncidents", fields: [reporterId], references: [id], onDelete: Cascade)
  description     String
  date            DateTime @default(now())
}

model Payment {
  id              String   @id @default(uuid())
  rentalId        String   @unique
  rental          Rental   @relation(fields: [rentalId], references: [id], onDelete: Cascade)
  amount          Float
  createdAt       DateTime @default(now())
}

model Notification {
  id              String   @id @default(uuid())
  rentalId        String
  rental          Rental   @relation(fields: [rentalId], references: [id], onDelete: Cascade)
  userId          String
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  message         String
  isRead          Boolean  @default(false)
  createdAt       DateTime @default(now())
}

model VehicleAvailability {
  id        String   @id @default(uuid())
  vehicleId String
  vehicle   Vehicle  @relation(fields: [vehicleId], references: [id], onDelete: Cascade)
  startDate DateTime
  endDate   DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([vehicleId, startDate, endDate])
  @@index([vehicleId])
}

enum Role {
  ADMIN
  USER
  BOTH
}

enum RentalStatus {
  PENDING
  APPROVED
  REJECTED
  COMPLETED
  CANCELLED
}

enum VehicleType {
  CAR
  MOTORCYCLE
  BICYCLE
  SCOOTER
}

enum FuelType {
  PETROL
  DIESEL
  ELECTRIC
  HYBRID
}

enum CarCategory {
  SMALL
  MEDIUM
  SUV
  VAN
  LUXURY
}

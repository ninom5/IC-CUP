// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String   @id @default(uuid())
  firstName      String
  lastName       String
  email          String   @unique
  password       String
  dateOfBirth    DateTime
  img            String
  role           Role     @default(USER)
  isVerified     Boolean  @default(false)
  driverLicense  String
  idCard         String
  phoneNumber    String
  address        String
  bankAccount    String?  @default(null)
  totalEarnings  Float    @default(0.0)
  isSuspended    Boolean  @default(false)
  createdAt      DateTime @default(now())
  lastModifiedAt DateTime @default(now()) @updatedAt
}

model Country {
  id   String @id @default(uuid())
  name String @unique
  code String @unique
  City City[]
}

model City {
  id        String     @id @default(uuid())
  name      String
  countryId String
  country   Country    @relation(fields: [countryId], references: [id], onDelete: Cascade)
  Location  Location[]
}

model Location {
  id      String @id @default(uuid())
  cityId  String
  city    City   @relation(fields: [cityId], references: [id], onDelete: Cascade)
  address String
  zipCode String
}

model VehicleType {
  id    String @id @default(uuid())
  type  String @unique
}

model Car {
  id              String @id @default(uuid())
  vehicleTypeId   String
  vehicleType     VehicleType @relation(fields: [vehicleTypeId], references: [id], onDelete: Cascade)
  licensePlate    String @unique
  fuelType        FuelType
  isAutomatic     Boolean
  category        CarCategory
}

model Vehicle {
  id              String @id @default(uuid())
  ownerId         String
  owner           User @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  brand           String
  model           String
  images          String[]
  productionYear  Int
  dailyPrice      Float
  isAvailable     Boolean @default(true)
  description     String
  isVerified      Boolean @default(false)
  registration    String
  locationId      String
  location        Location @relation(fields: [locationId], references: [id], onDelete: Cascade)
  vehicleTypeId   String
  vehicleType     VehicleType @relation(fields: [vehicleTypeId], references: [id], onDelete: Cascade)
}

model Review {
  id            String @id @default(uuid())
  reviewerId    String 
  reviewer      User @relation(fields: [reviewerId], references: [id], onDelete: Cascade)
  revieweeId    String
  reviewee      User @relation(fields: [revieweeId], references: [id], onDelete: Cascade)
  vehicleId     String
  vehicle       Vehicle @relation(fields: [vehicleId], references: [id], onDelete: Cascade)
  rating        Int
  comment       String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @default(now()) @updatedAt
}

enum Role {
  ADMIN
  USER
  BOTH
}

enum FuelType {
  PETROL
  DIESEL
  ELECTRIC
  HYBRID
}

enum CarCategory {
  SMALL
  MEDIUM
  SUV
  VAN
  LUXURY
}
